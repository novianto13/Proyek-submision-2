# -*- coding: utf-8 -*-
"""Dashboard4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pqgr9aLr3ICQgxus9pjLws8RD4z12ICc
"""


# app.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

all_df = pd.read_csv("all_data.csv")

# Sidebar for navigation
st.sidebar.title('Dashboard Menu')
option = st.sidebar.selectbox('Choose a Visualization',
                              ['Tren penjualan',
                               'Produk yang banyak dibeli',
                               'Order Status',
                               'Top sale',
                               'Top cancel product'])

# Main content
st.title('E-Commerce Dashboard')

if option == 'Tren penjualan':
    st.header('Tren penjualan')

    all_df['order_purchase_timestamp'] = pd.to_datetime(all_df['order_purchase_timestamp'])
    monthly_orders_df = all_df.resample(rule='M', on='order_purchase_timestamp').agg({
    "order_id": "count",
    "price": "mean"
    })
    monthly_orders_df.index = monthly_orders_df.index.strftime('%Y-%m')
    monthly_orders_df = monthly_orders_df.reset_index()
    monthly_orders_df.rename(columns={
    "order_id": "order_count",
    "price": "revenue"
    }, inplace=True)
    monthly_orders_df.head()


    # Visualisasi data trend
    plt.figure(figsize=(12, 6))
    # Use monthly_orders_df.index for x-axis values
    plt.plot(monthly_orders_df.index, monthly_orders_df['order_count'], marker='o', linestyle='-', color='b', label='Jumlah Nilai Order')
    plt.plot(monthly_orders_df.index, monthly_orders_df['revenue'], marker='x', linestyle='--', color='r', label='Rata-rata Pendapatan')

    plt.title('Trend Jumlah Order dan Rata-rata Pendapatan per Bulan')
    plt.xlabel('Bulan')
    plt.ylabel('Jumlah / Pendapatan')
    plt.xticks(rotation=45, ha='right')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()
    st.pyplot()

elif option == 'Produk yang banyak dibeli':
    st.header('Produk yang banyak dibeli')

    # Menghitung jumlah order untuk setiap kategori produk
    product_order_counts = all_df.groupby('product_category_name')['order_id'].count().reset_index()

    # Mengurutkan data berdasarkan jumlah order secara descending
    product_order_counts = product_order_counts.sort_values(by=['order_id'], ascending=False)

    # Mengambil 10 kategori produk dengan order tertinggi
    top_10_products = product_order_counts.head(10)


    # Membuat bar chart
    plt.figure(figsize=(12, 6))  # Mengatur ukuran figure
    sns.barplot(x='product_category_name', y='order_id', data=top_10_products)
    plt.title('10 Kategori Produk dengan Order Tertinggi')
    plt.xlabel('Kategori Produk')
    plt.ylabel('Jumlah Order')
    plt.xticks(rotation=45, ha='right')  # Memutar label sumbu x agar mudah dibaca
    plt.tight_layout()  # Menyesuaikan layout agar tidak terpotong
    plt.show()
    st.pyplot()

elif option == 'Order Status':
    st.header('Order Status')

    # Menghitung jumlah order untuk setiap kategori produk
    product_order_counts = all_df.groupby('order_status')['order_id'].count().reset_index()

    # Mengurutkan data berdasarkan jumlah order secara descending
    product_order_counts = product_order_counts.sort_values(by=['order_id'], ascending=False)

    # Mengambil 10 kategori produk dengan order tertinggi
    top_10_products = product_order_counts.head(10)


    # Membuat bar chart
    plt.figure(figsize=(12, 6))  # Mengatur ukuran figure
    sns.barplot(x='order_status', y='order_id', data=top_10_products)
    plt.title('Proses transaksi')
    plt.xlabel('Kategori Produk')
    plt.ylabel('Jumlah Order')
    plt.xticks(rotation=45, ha='right')  # Memutar label sumbu x agar mudah dibaca
    plt.tight_layout()  # Menyesuaikan layout agar tidak terpotong
    plt.show()
    st.pyplot()

elif option == 'Top sale':
    st.header('Top sale')

    # Assuming 'all_df' is your DataFrame
    aggregated_df = all_df.groupby(by=["order_status", "customer_state"]).agg({
    "product_id": "count",
    "price": "mean"
    }).sort_values(by=["order_status", "product_id"], ascending=False)

    # Reset index for plotting
    aggregated_df = aggregated_df.reset_index()


    # Create a bar plot using seaborn
    plt.figure(figsize=(12, 6))
    sns.barplot(x="order_status", y="product_id", hue="customer_state", data=aggregated_df)
    plt.title("Top 10 Order Statuses and Customer States by Product Count")
    plt.xlabel("Order Status")
    plt.ylabel("Product Count")
    plt.xticks(rotation=45, ha='right')
    plt.legend(title="Customer State")
    plt.tight_layout()
    plt.show()
    st.pyplot()

elif option == 'Top cancel product':
    st.header('Top cancel product')

    canceled_orders = all_df[all_df['order_status'] == 'canceled']

    # Groupby dan agregasi untuk produk dan kota
    product_cancels = canceled_orders.groupby(by=['product_category_name', 'customer_city']).agg({
    'order_id': 'count'  # Menghitung jumlah pesanan dibatalkan per kategori produk dan kota
    }).sort_values(by=['order_id'], ascending=False)

    # Reset the index for plotting
    product_cancels = product_cancels.reset_index()

    # Take the top 10 product categories for visualization
    top_10_product_cancels = product_cancels.head(10)

    # Create a bar plot using seaborn
    plt.figure(figsize=(12, 6))
    sns.barplot(x="product_category_name", y="order_id", hue="customer_city", data=top_10_product_cancels)
    plt.title("Top 10 Product Categories with Highest Canceled Orders by City")
    plt.xlabel("Product Category")
    plt.ylabel("Number of Canceled Orders")
    plt.xticks(rotation=45, ha='right')
    plt.legend(title="Customer City")
    plt.tight_layout()
    plt.show()
    st.pyplot()

!streamlit run app1.py
